local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Membuat window utama
local Window = OrionLib:MakeWindow({
    Name = "Blade Ball",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionTest",
})

if Window and type(Window.Init) == "function" then
    Window:Init()
else
    warn("Window Init function is missing!")
end

OrionLib:MakeNotification({
    Name = "Execution Started",
    Content = "GUI successfully loaded!",
    Image = nil,
    Time = 5
})

local Tab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

-- SERVICES
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local vim = game:GetService("VirtualInputManager")

local ballFolder = workspace.Balls
local indicatorPart = Instance.new("Part")
indicatorPart.Size = Vector3.new(5, 5, 5)
indicatorPart.Anchored = true
indicatorPart.CanCollide = false
indicatorPart.Transparency = 1
indicatorPart.BrickColor = BrickColor.new("Bright red")
indicatorPart.Parent = workspace

local lastBallPressed = nil
local isKeyPressed = false
local autoParryActive = false
local autoSpamActive = false
local spamDelay = 0.1

local function getPlayerPing(player)
    local success, ping = pcall(function()
        return player:GetNetworkPing()
    end)
    return success and ping or 0
end

local function calculatePredictionTime(ball, player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = player.Character.HumanoidRootPart
        local relativePosition = ball.Position - rootPart.Position
        local velocity = ball.Velocity + rootPart.Velocity 

        local a = (ball.Size.magnitude / 2)
        local b = relativePosition.magnitude
        local c = math.sqrt(a * a + b * b)
        
        local timeToCollision = (c - a) / velocity.magnitude

        local pingAdjustment = getPlayerPing(players.LocalPlayer) / 1000
        timeToCollision = timeToCollision + pingAdjustment

        return timeToCollision
    end
    return math.huge
end

local function updateIndicatorPosition(ball)
    indicatorPart.Position = ball.Position
end

local function checkProximityToPlayer(ball, player)
    if not autoParryActive then return end

    local predictionTime = calculatePredictionTime(ball, player)
    local realBallAttribute = ball:GetAttribute("realBall")
    local target = ball:GetAttribute("target")
    
    local ballSpeedThreshold = math.max(0.31, 0.5 - ball.Velocity.magnitude * 0.01)

    if predictionTime <= ballSpeedThreshold + 0.1 and realBallAttribute == true and target == player.Name and not isKeyPressed then
        vim:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
        wait(0.005)
        vim:SendKeyEvent(false, Enum.KeyCode.F, false, nil)
        lastBallPressed = ball
        isKeyPressed = true
        OrionLib:MakeNotification({
            Name = "Parry Executed",
            Content = "Successfully executed parry!",
            Image = nil,
            Time = 3
        })
    elseif lastBallPressed == ball and (predictionTime > ballSpeedThreshold or realBallAttribute ~= true or target ~= player.Name) then
        isKeyPressed = false
    end
end

local function performAutoSpam()
    if not autoSpamActive then return end

    while autoSpamActive do
        vim:SendKeyEvent(true, Enum.KeyCode.Mouse1, false, nil)
        wait(spamDelay)
        vim:SendKeyEvent(false, Enum.KeyCode.Mouse1, false, nil)
    end
end

local playerFacing = false
local opponentPlayer = nil

local function checkBallsProximity()
    local player = players.LocalPlayer
    if player then
        for _, ball in pairs(ballFolder:GetChildren()) do
            checkProximityToPlayer(ball, player)
            updateIndicatorPosition(ball)
            
            local ballSpeed = ball.Velocity.magnitude
            local playersInProximity = 0
            
            for _, otherPlayer in pairs(players:GetPlayers()) do
                if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (player.Character.HumanoidRootPart.Position - otherPlayer.Character.HumanoidRootPart.Position).magnitude
                    if distance < 15 then
                        playersInProximity = playersInProximity + 1
                        opponentPlayer = otherPlayer
                    end
                end
            end
            
            if playersInProximity == 1 then
                playerFacing = true
                if ballSpeed > 0.5 and not autoSpamActive then
                    ToggleAutoSpam() 
                elseif ballSpeed <= 0.5 and autoSpamActive then
                    ToggleAutoSpam() 
                end
            else
                playerFacing = false
                if autoSpamActive then
                    ToggleAutoSpam() 
                end
            end
        end
    end
end

runService.Heartbeat:Connect(checkBallsProximity)

local function ToggleAutoParry()
    autoParryActive = not autoParryActive
    OrionLib:MakeNotification({
        Name = autoParryActive and "Auto Parry Activated" or "Auto Parry Deactivated",
        Content = autoParryActive and "Auto Parry is now active!" or "Auto Parry has been turned off.",
        Image = nil,
        Time = 3
    })
end

local function ToggleAutoSpam()
    autoSpamActive = not autoSpamActive
    OrionLib:MakeNotification({
        Name = autoSpamActive and "Auto Spam Activated" or "Auto Spam Deactivated",
        Content = autoSpamActive and "Auto Spam is now active!" or "Auto Spam has been turned off.",
        Image = nil,
        Time = 3
    })
    if autoSpamActive then
        performAutoSpam() 
    end
end

Tab:AddButton({
    Name = "Toggle Auto Parry",
    Callback = function()
        ToggleAutoParry()
    end
})

Tab:AddButton({
    Name = "Toggle Auto Spam",
    Callback = function()
        ToggleAutoSpam()
    end
})

print("Script ran without errors")
