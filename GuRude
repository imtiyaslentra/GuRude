local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Membuat window utama
local Window = OrionLib:MakeWindow({
    Name = "Blade Ball",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionTest",
})

-- Memanggil Init pada objek Window
if Window and type(Window.Init) == "function" then
    Window:Init()
else
    warn("Window Init function is missing!")
end

-- Notifikasi ketika GUI di-load
OrionLib:MakeNotification({
    Name = "Execution Started",
    Content = "GUI successfully loaded!",
    Image = nil,
    Time = 5
})

-- Tab utama
local Tab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

-- SERVICES
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local vim = game:GetService("VirtualInputManager")

local ballFolder = workspace.Balls
local indicatorPart = Instance.new("Part")
indicatorPart.Size = Vector3.new(5, 5, 5)
indicatorPart.Anchored = true
indicatorPart.CanCollide = false
indicatorPart.Transparency = 1
indicatorPart.BrickColor = BrickColor.new("Bright red")
indicatorPart.Parent = workspace

local visualizerPart = Instance.new("Part") -- Part untuk visualizer
visualizerPart.Size = Vector3.new(1, 1, 1)
visualizerPart.Anchored = true
visualizerPart.CanCollide = false
visualizerPart.BrickColor = BrickColor.new("Bright yellow")
visualizerPart.Transparency = 1 -- Mulai dengan tidak terlihat
visualizerPart.Parent = workspace

local lastBallPressed = nil
local isKeyPressed = false
local autoParryActive = false -- Status untuk toggle Auto Parry
local showVisualizer = false -- Status untuk toggle visualizer

-- Fungsi toggle untuk Auto Parry
local function ToggleAutoParry()
    autoParryActive = not autoParryActive
    if autoParryActive then
        OrionLib:MakeNotification({
            Name = "Auto Parry Activated",
            Content = "Auto Parry is now active!",
            Image = nil,
            Time = 3
        })
    else
        OrionLib:MakeNotification({
            Name = "Auto Parry Deactivated",
            Content = "Auto Parry has been turned off.",
            Image = nil,
            Time = 3
        })
    end
end

-- Fungsi untuk mendeteksi ping
local function GetPing()
    return game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue() / 10
end

-- Fungsi untuk mendeteksi posisi dan kecepatan bola
local function DetectBall()
    local closestBall = nil
    local closestDistance = math.huge

    for _, ball in pairs(ballFolder:GetChildren()) do
        if ball:IsA("Ball") then
            local distance = (players.LocalPlayer.Character.PrimaryPart.Position - ball.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestBall = ball
            end
        end
    end

    return closestBall, closestDistance
end

-- Fungsi untuk memprediksi posisi bola
local function PredictBallPosition(ball)
    local ping = GetPing()
    local predictionTime = 0.25 + (ping / 100)
    return ball.Position + (ball.AssemblyLinearVelocity * predictionTime)
end

-- Fungsi untuk memeriksa apakah bola dalam keadaan berhenti
local function IsBallStationary(ball)
    return ball.AssemblyLinearVelocity.Magnitude < 0.1 -- Anggap bola berhenti jika kecepatan < 0.1
end

-- Fungsi utama untuk memeriksa kondisi Auto Parry
local function CheckAutoParry()
    if not autoParryActive then 
        visualizerPart.Transparency = 1 -- Sembunyikan visualizer jika Auto Parry tidak aktif
        return 
    end

    local closestBall, distanceToBall = DetectBall()
    if closestBall then
        local predictedPosition = PredictBallPosition(closestBall)

        -- Deteksi tambahan untuk memastikan bola tidak berhenti
        if IsBallStationary(closestBall) then
            print("Ball is stationary, not executing parry.")
            visualizerPart.Transparency = 1 -- Sembunyikan visualizer jika bola berhenti
            return
        end

        -- Perbarui posisi visualizer
        visualizerPart.Position = predictedPosition
        visualizerPart.Transparency = showVisualizer and 0.5 or 1 -- Tampilkan visualizer sesuai checkbox

        -- Logika untuk menentukan apakah perlu melakukan parry
        if distanceToBall < 10 then
            -- Implementasikan logika parry di sini, misalnya:
            print("Parry executed at position: ", predictedPosition)
            -- Panggil fungsi parry di sini
        end
    else
        visualizerPart.Transparency = 1 -- Sembunyikan visualizer jika tidak ada bola
    end
end

-- Menambahkan tombol Toggle Auto Parry pada tab
Tab:AddButton({
    Name = "Toggle Auto Parry",
    Callback = function()
        ToggleAutoParry()
    end
})

-- Menambahkan checkbox untuk menampilkan visualizer
Tab:AddToggle({
    Name = "Show Visualizer",
    Default = false,
    Callback = function(value)
        showVisualizer = value
        visualizerPart.Transparency = value and 0.5 or 1 -- Set transparansi sesuai dengan checkbox
    end
})

-- Menjalankan fungsi Auto Parry dalam loop
runService.RenderStepped:Connect(function()
    pcall(CheckAutoParry) -- Menggunakan pcall untuk menangani kesalahan tanpa menghentikan skrip
end)

print("Script ran without errors")
